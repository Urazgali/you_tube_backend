package com.example.service;import com.example.dto.ApiResponse;import com.example.dto.PlaylistVideoDTO;import com.example.dto.VideoDTO;import com.example.entity.PlaylistVideoEntity;import com.example.entity.VideoEntity;import com.example.enums.Language;import com.example.mapper.PlaylistVideoInfoMapper;import com.example.repository.PlaylistVideoRepository;import com.example.util.SpringSecurityUtil;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.*;import org.springframework.stereotype.Service;import java.util.List;import java.util.Optional;@Servicepublic class PlaylistVideoService {    @Autowired    private PlaylistVideoRepository playlistVideoRepository;    @Autowired    private ResourceBundleService resourceBundleService;    @Autowired    private VideoService videoService;    private PlaylistVideoDTO TO_DTO(PlaylistVideoEntity entity) {        PlaylistVideoDTO dto = new PlaylistVideoDTO();        dto.setPlaylistId(entity.getPlaylistId());        dto.setVideoId(entity.getVideoId());        dto.setId(entity.getId());        dto.setOrderNum(entity.getOrderNum());        return dto;    }    private PlaylistVideoEntity TO_ENTITY(PlaylistVideoDTO dto) {        PlaylistVideoEntity entity = new PlaylistVideoEntity();        entity.setVideoId(dto.getVideoId());        entity.setPlaylistId(dto.getPlaylistId());        entity.setOrderNum(dto.getOrderNum());        return entity;    }    public ApiResponse create(PlaylistVideoDTO dto, Language lang) {        Integer prtId = SpringSecurityUtil.getCurrentProfileId();        try {            PlaylistVideoEntity entity = TO_ENTITY(dto);            entity.setPrtId(prtId);            PlaylistVideoEntity saved = playlistVideoRepository.save(entity);            return new ApiResponse(true, TO_DTO(saved));        } catch (Throwable e) {            return new ApiResponse(false, resourceBundleService.getMessage("unique.constraint", lang));        }    }    public ApiResponse update(Integer id, PlaylistVideoDTO dto, Language lang) {        Integer prtId = SpringSecurityUtil.getCurrentProfileId();        Optional<PlaylistVideoEntity> optionalPlaylistVideo = playlistVideoRepository.findById(id);        if (optionalPlaylistVideo.isPresent()) {            PlaylistVideoEntity entity = optionalPlaylistVideo.get();            if (entity.getPrtId().equals(prtId)) {                entity.setPlaylistId(dto.getPlaylistId());                entity.setVideoId(dto.getVideoId());                PlaylistVideoEntity updated = playlistVideoRepository.save(entity);                return new ApiResponse(true, TO_DTO(updated));            } else {                return new ApiResponse(false, resourceBundleService.getMessage("you.are.not.allowed", lang));            }        } else {            return new ApiResponse(false, resourceBundleService.getMessage("item.not.found", lang));        }    }    public ApiResponse delete(Integer id, Language lang) {        Integer prtId = SpringSecurityUtil.getCurrentProfileId();        Optional<PlaylistVideoEntity> optionalPlaylistVideo = playlistVideoRepository.findById(id);        if (optionalPlaylistVideo.isPresent()) {            PlaylistVideoEntity entity = optionalPlaylistVideo.get();            if (entity.getPrtId().equals(prtId)) {                playlistVideoRepository.deleteById(id);                return new ApiResponse(true, resourceBundleService.getMessage("success.deleted", lang));            } else {                return new ApiResponse(false, resourceBundleService.getMessage("you.are.not.allowed", lang));            }        } else {            return new ApiResponse(false, resourceBundleService.getMessage("item.not.found", lang));        }    }    public ApiResponse deleteByPlaylistId(Integer id, Language lang) {        Integer prtId = SpringSecurityUtil.getCurrentProfileId();        Optional<PlaylistVideoEntity> optionalPlaylistVideo = playlistVideoRepository.findByPlaylistId(id);        if (optionalPlaylistVideo.isPresent()) {            PlaylistVideoEntity entity = optionalPlaylistVideo.get();            if (entity.getPrtId().equals(prtId)) {                playlistVideoRepository.deleteByPlaylistId(id);                return new ApiResponse(true, resourceBundleService.getMessage("success.deleted", lang));            } else {                return new ApiResponse(false, resourceBundleService.getMessage("you.are.not.allowed", lang));            }        } else {            return new ApiResponse(false, resourceBundleService.getMessage("item.not.found", lang));        }    }    public ApiResponse deleteByVideoId(String id, Language lang) {        Integer prtId = SpringSecurityUtil.getCurrentProfileId();        Optional<PlaylistVideoEntity> optionalPlaylistVideo = playlistVideoRepository.findByVideoId(id);        if (optionalPlaylistVideo.isPresent()) {            PlaylistVideoEntity entity = optionalPlaylistVideo.get();            if (entity.getPrtId().equals(prtId)) {                playlistVideoRepository.deleteByVideoId(id);                return new ApiResponse(true, resourceBundleService.getMessage("success.deleted", lang));            } else {                return new ApiResponse(false, resourceBundleService.getMessage("you.are.not.allowed", lang));            }        } else {            return new ApiResponse(false, resourceBundleService.getMessage("item.not.found", lang));        }    }    public List<PlaylistVideoInfoMapper> getVideoListByPlaylistId(Integer id, Language lang) {        return playlistVideoRepository                .getVideoListByPlaylistId(id);    }}