package com.example.controller;import com.example.dto.ApiResponse;import com.example.dto.AuthDTO;import com.example.dto.RegistrationDTO;import com.example.enums.Language;import com.example.service.AuthService;import com.example.service.EmailSenderService;import com.example.service.MailSenderService;import com.example.util.HTMLUtil;import jakarta.servlet.Registration;import jakarta.servlet.http.HttpServletResponse;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.io.IOException;@RestController@RequestMapping("/api/v1/auth")public class AuthController {    @Autowired    private AuthService authService;    @Autowired    private EmailSenderService emailSenderService;    @PostMapping("/login")    public ResponseEntity<ApiResponse> login(@RequestBody AuthDTO dto,                                             @RequestParam(defaultValue = "en") Language lang) {        return ResponseEntity.ok(authService.login(dto, lang));    }    @PostMapping("/registration")    public ResponseEntity<ApiResponse> registration(@RequestBody RegistrationDTO dto,                                                    @RequestParam(defaultValue = "en") Language lang) {        return ResponseEntity.ok(authService.registration(dto, lang));    }    @GetMapping(value = "/verification/email/{jwt}")    public void registration(@PathVariable String jwt,                             HttpServletResponse response,                             @RequestParam(defaultValue = "en") Language lang) {        ApiResponse apiResponse = emailSenderService.emailVerification(jwt, lang);        if (apiResponse.getStatus()) {            try {                response.setContentType("text/html");                response.setCharacterEncoding("UTF-8");                response.getWriter().write(HTMLUtil.getResponse());                response.getWriter().flush();            } catch (IOException e) {                e.printStackTrace();            }        } else {            ResponseEntity<ApiResponse> error = new ResponseEntity<>(apiResponse, HttpStatus.BAD_REQUEST);        }    }    @GetMapping(value = "/verification/update-email/{jwt}/{oldEmail}/{newEmail}")    public void updateEmail(@PathVariable String oldEmail,                            @PathVariable String newEmail,                            HttpServletResponse response) {        ApiResponse apiResponse = emailSenderService.sendUpdateNewEmailVerification(oldEmail, newEmail);        if (apiResponse.getStatus()) {            try {                response.setContentType("text/html");                response.setCharacterEncoding("UTF-8");                response.getWriter().write(HTMLUtil.getResponse());                response.getWriter().flush();            } catch (IOException e) {                e.printStackTrace();            }        } else {            ResponseEntity<ApiResponse> error = new ResponseEntity<>(apiResponse, HttpStatus.BAD_REQUEST);        }    }    @GetMapping(value = "/verification/update-password/{jwt}/{email}/{password}")    public void updatePassword(@PathVariable String email,                               @PathVariable String password,                               HttpServletResponse response) {        ApiResponse apiResponse = emailSenderService.sendUpdateNewPasswordVerification(email, password);        if (apiResponse.getStatus()) {            try {                response.setContentType("text/html");                response.setCharacterEncoding("UTF-8");                response.getWriter().write(HTMLUtil.getResponse());                response.getWriter().flush();            } catch (IOException e) {                e.printStackTrace();            }        } else {            ResponseEntity<ApiResponse> error = new ResponseEntity<>(apiResponse, HttpStatus.BAD_REQUEST);        }    }}