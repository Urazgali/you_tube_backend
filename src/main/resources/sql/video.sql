--INCREASE VIDEO COUNT FUNCTION & TRIGGERcreate or replace function increase_video_views()    returns trigger as$$BEGIN    update video    set view_count = view_count + 1    where id = new.video_id;END;$$ language plpgsql;dropcreate trigger increase_video_views_trigger    after insert    on video_watched    for each rowexecute function increase_video_views();-- CREATE VIDEOINSERT INTO public.video (category_id, visible, created_date, dislike_count, like_count, published_date, shared_count, view_count, title, attach_id,                          channel_id, description, id, preview_attach_id, video_status, video_type)VALUES (1, true, '2023-08-14 16:41:33.000000', 0, 0, '2023-08-14 16:41:41.000000', 0, 0, 'SALOM', '1', '1', 'salom berish odobi', '1', '1', 'PUBLIC',        'SHORT');--PAGING SHORT INFO ONLY ADMIN BY MAPPERselect v.id as video_id,       v.title,       v.category_id,       v.attach_id,       v.channel_id,       v.description,       v.video_type,       v.video_status,       v.created_date,       p.id as prt_id,       p.name,       p.surnamefrom video as v         inner join profile as p                    on v.prt_id = p.id;--PAGING FULL INFO ONLY ADMIN BY MAPPERselect v.id as video_id,       v.title,       v.category_id,       v.attach_id,       v.channel_id,       v.description,       v.video_type,       v.video_status,       v.created_date,       p.id as prt_id,       p.name,       p.surnamefrom video as v         inner join profile as p                    on v.prt_id = p.id;--PAGING VIDEO FULL INFO ONLY ADMIN BY MAPPERselect v.id   as video_id,       v.title,       v.description,       pa.id  as preview_id,       pa.url as preview_url,       a.id   as attach_id,       a.path,       a.duration,       c.id   as category_id,       c.name,       v.published_date,       ch.id  as channel_id,       ch.name,       ch.photo_id,       v.view_count,       v.shared_count,       v.like_count,       v.dislike_count,       a.durationfrom video as v         inner join preview_attach as pa on v.preview_attach_id = pa.id         inner join attach as a on v.attach_id = a.id         inner join category as c on v.category_id = c.id         inner join channel as ch on v.channel_id = ch.id         inner join video_tag as vt on v.id = vt.video_id;select v.id, v.title, pa.id, pa.url, v.view_count, v.published_date, a.duration from video as v         inner join preview_attach as pa on v.preview_attach_id = pa.id         inner join attach as a on v.attach_id = a.id;drop table video cascade;select 1from video_watchedwhere profile_id = 1  and video_id = '1';